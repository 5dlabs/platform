---
# PostgreSQL cluster for agent-docs service
# Provides persistent storage for documentation, task history, and metadata
apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: agent-docs-postgres
  namespace: databases
  labels:
    team: platform
    service: agent-docs
    environment: production
    app.kubernetes.io/name: agent-docs-postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: agent-platform
spec:
  # Team identifier
  teamId: "platform"

  # PostgreSQL configuration
  postgresql:
    version: "16"  # LTS version for stability
    parameters:
      # Performance settings optimized for agent-docs workload
      max_connections: "200"
      shared_buffers: "512MB"
      effective_cache_size: "2GB"
      maintenance_work_mem: "128MB"
      checkpoint_completion_target: "0.9"
      wal_buffers: "16MB"
      default_statistics_target: "100"
      random_page_cost: "1.1"
      effective_io_concurrency: "200"
      work_mem: "8MB"
      min_wal_size: "512MB"
      max_wal_size: "2GB"

      # Parallel query execution
      max_worker_processes: "4"
      max_parallel_workers_per_gather: "2"
      max_parallel_workers: "4"

      # Enable useful extensions for agent-docs (including pgvector for embeddings)
      # NOTE: These extensions are required and included in Zalando PostgreSQL operator images:
      # - bg_mon, pg_stat_statements, pgextwlist, pg_auth_mon: Standard monitoring/management
      # - pgvector: Required for AI/ML vector embeddings (installed by default in v1.7.0+)
      # - timescaledb: Required for time-series metrics (installed by default in v1.7.0+)
      # If using older operator versions, ensure these extensions are available in the image.
      # TimescaleDB and pgvector are tested for compatibility in production environments.
      shared_preload_libraries: "bg_mon,pg_stat_statements,pgextwlist,pg_auth_mon,pgvector,timescaledb"

      # Logging for debugging
      log_statement: "mod"  # Log DDL and data-modifying statements
      log_duration: "off"
      log_min_duration_statement: "500ms"  # Log queries > 500ms
      log_checkpoints: "on"
      log_connections: "on"
      log_disconnections: "on"
      log_lock_waits: "on"
      log_temp_files: "0"

      # Statement timeouts
      statement_timeout: "30s"
      lock_timeout: "10s"
      idle_in_transaction_session_timeout: "60s"

  # HA configuration - 2 instances for redundancy
  numberOfInstances: 2

  # Storage configuration
  volume:
    size: 50Gi
    storageClass: local-path  # Adjust for your cluster

  # Resource allocation for agent-docs workload
  resources:
    requests:
      memory: 1Gi
      cpu: 250m
    limits:
      memory: 4Gi
      cpu: 1000m

  # Database users and permissions
  users:
    # Main application user
    agent_docs:
      - createdb
      - login
    # Read-only user for analytics/reporting
    agent_docs_readonly:
      - login
    # Admin user for maintenance
    agent_docs_admin:
      - superuser
      - createdb
      - login

  # Databases
  databases:
    agent_docs_db: agent_docs      # Main database for agent-docs
    agent_tasks_db: agent_docs     # Task history and tracking
    agent_metrics_db: agent_docs   # Metrics and telemetry

  # Prepared databases with extensions
  preparedDatabases:
    agent_docs_db:
      defaultUsers: true
      extensions:
        pg_stat_statements: "public"
        pgcrypto: "public"
        uuid-ossp: "public"
        pg_trgm: "public"           # For full-text search
        hstore: "public"            # For key-value storage
        pgvector: "public"          # For vector embeddings (AI/ML)
    agent_tasks_db:
      defaultUsers: true
      extensions:
        pg_stat_statements: "public"
        uuid-ossp: "public"
        pgvector: "public"          # For semantic task search
    agent_metrics_db:
      defaultUsers: true
      extensions:
        pg_stat_statements: "public"
        timescaledb: "public"       # For time-series metrics (if available)

  # Connection pooler for handling multiple agent connections
  enableConnectionPooler: true
  connectionPooler:
    numberOfInstances: 2
    mode: "transaction"
    schema: "pooler"
    user: "pooler"
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 200m
        memory: 256Mi

  # Backup configuration (optional - configure S3/GCS credentials)
  # env:
  #   - name: WAL_S3_BUCKET
  #     value: "agent-platform-backups"
  #   - name: AWS_REGION
  #     value: "us-east-1"
  #   - name: BACKUP_SCHEDULE
  #     value: "0 */12 * * *"  # Every 12 hours

  # Pod disruption budget
  enablePodDisruptionBudget: true

  # Affinity rules to spread instances
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchLabels:
              cluster-name: agent-docs-postgres
          topologyKey: kubernetes.io/hostname

  # Maintenance windows (UTC)
  maintenanceWindows:
    - "everyday: 03:00-04:00"

---
# Service for agent-docs to connect via pooler
apiVersion: v1
kind: Service
metadata:
  name: agent-docs-postgres-pooler
  namespace: databases
  labels:
    team: platform
    service: agent-docs
    app.kubernetes.io/name: agent-docs-postgres
spec:
  type: ClusterIP
  selector:
    cluster-name: agent-docs-postgres
    connection-pooler: agent-docs-postgres-pooler
  ports:
    - name: pgbouncer
      port: 5432
      targetPort: 5432
      protocol: TCP

---
# ConfigMap with database connection information
apiVersion: v1
kind: ConfigMap
metadata:
  name: agent-docs-postgres-config
  namespace: databases
  labels:
    team: platform
    service: agent-docs
data:
  # Connection endpoints
  POSTGRES_HOST: "agent-docs-postgres.databases.svc.cluster.local"
  POSTGRES_POOLER_HOST: "agent-docs-postgres-pooler.databases.svc.cluster.local"
  POSTGRES_PORT: "5432"
  POSTGRES_DATABASE: "agent_docs_db"
  POSTGRES_TASKS_DATABASE: "agent_tasks_db"
  POSTGRES_METRICS_DATABASE: "agent_metrics_db"

  # Connection URLs (credentials will be in secrets)
  DATABASE_URL_TEMPLATE: "postgresql://agent_docs:PASSWORD@agent-docs-postgres-pooler.databases.svc.cluster.local:5432/agent_docs_db"
  TASKS_DATABASE_URL_TEMPLATE: "postgresql://agent_docs:PASSWORD@agent-docs-postgres-pooler.databases.svc.cluster.local:5432/agent_tasks_db"
  METRICS_DATABASE_URL_TEMPLATE: "postgresql://agent_docs:PASSWORD@agent-docs-postgres-pooler.databases.svc.cluster.local:5432/agent_metrics_db"

  # Connection pooling recommendations
  connection-pool-config: |
    # Recommended pool settings for agent-docs:
    min_connections: 5
    max_connections: 20
    connection_timeout: 5000
    idle_timeout: 600000
    max_lifetime: 1800000

  # Usage examples
  usage-example: |
    # Direct connection (bypasses pooler)
    postgresql://agent_docs:PASSWORD@agent-docs-postgres.databases.svc.cluster.local:5432/agent_docs_db

    # Pooled connection (recommended)
    postgresql://agent_docs:PASSWORD@agent-docs-postgres-pooler.databases.svc.cluster.local:5432/agent_docs_db

    # Read-only connection
    postgresql://agent_docs_readonly:PASSWORD@agent-docs-postgres.databases.svc.cluster.local:5432/agent_docs_db

    # Using pgvector for embeddings (example SQL):
    # CREATE TABLE documents (id bigserial PRIMARY KEY, content text, embedding vector(1536));
    # CREATE INDEX ON documents USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);
    # SELECT * FROM documents ORDER BY embedding <=> '[0.1, 0.2, ...]' LIMIT 10;

---
# Note: The operator automatically creates secrets for database users
# Secret names follow the pattern: {username}.{clustername}.credentials.postgresql.acid.zalan.do
#
# For agent-docs, the secrets will be:
# - agent_docs.agent-docs-postgres.credentials.postgresql.acid.zalan.do
# - agent_docs_readonly.agent-docs-postgres.credentials.postgresql.acid.zalan.do
# - agent_docs_admin.agent-docs-postgres.credentials.postgresql.acid.zalan.do
#
# Each secret contains:
# - username: The database username
# - password: The generated password
